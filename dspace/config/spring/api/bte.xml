<?xml version="1.0" encoding="UTF-8"?>

<!-- TEST-SPRING.XML -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

  <bean id="gr.ekt.bte.core.TransformationEngine" class="gr.ekt.bte.core.TransformationEngine">
    <property name="workflow" ref="linearWorkflow"/>
  </bean>

  <bean id="org.dspace.app.itemimport.DataLoaderService" class="org.dspace.app.itemimport.DataLoaderService">
    <property name="dataLoaders">
      <map>
        <entry>
          <key><value>bibtex</value></key>
          <ref bean="gr.ekt.bteio.loaders.BibTeXDataLoader"/>
        </entry>
        <entry>
          <key><value>csv</value></key>
          <ref bean="gr.ekt.bteio.loaders.CSVDataLoader"/>
        </entry>
        <entry>
          <key><value>tsv</value></key>
          <ref bean="gr.ekt.bteio.loaders.TSVDataLoader"/>
        </entry>
        <entry>
          <key><value>ris</value></key>
          <ref bean="gr.ekt.bteio.loaders.RISDataLoader"/>
        </entry>
        <!-- <entry>
             <key><value>endnote</value></key>
             <ref bean="gr.ekt.bteio.loaders.EndnoteDataLoader"/>
             </entry> -->
      </map>
    </property>
    
    <!-- 
    	The output generator needs a configuration on how to map internal
    	records to the DSpace metadata fields. The following map specifies
    	this relationship. The value needs to be the label that the record 
    	internally associates with the specific data and it is specified in
    	the data loader beans. The key is in the format of 
    	<schema>.<element>[.<qualifier>] and specified the dspace metadata
    	field that the value will map to.
     -->
    <property name="outputMap">
      <map>
        <entry value="Title" key="dc.title"/>
        <entry value="Type" key="dc.type"/>
        <entry value="Author" key="dc.contributor.author"/>
        <entry value="Abstract" key="dc.description.abstract"/>
        <entry value="Journal" key="dc.source"/>
        <entry value="Year" key="dc.date"/>
        <entry value="ISSN" key="dc.identifier"/>
      </map>
    </property>
  </bean>

  <!-- DataLoader beans -->
  <!--
      Each dataloader needs a mapping that defines how the input maps to
      records. Internally every record organizes the data as key-list
      of values pairs, and in order to be able to recall the values
      the keys should have distinct names. Each data format has a way
      to address individual data, and this is the key of the map. The
      value is the label that the record internally associates with
      the specific data and is used in the output mapping as well.
  -->

  <!--
      The key of the map is just the BibTeX label (e.g. author, date,
      pages etc). The value the label that the record internally associates 
      with the specific data.
  -->
  <bean id="gr.ekt.bteio.loaders.BibTeXDataLoader"
        class="gr.ekt.bteio.loaders.BibTeXDataLoader">
    <property name="fieldMap">
      <map>
        <entry key="title" value="Title"/>
        <entry key="author" value="Author"/>
        <entry key="journal" value="Journal"/>
        <entry key="year" value="Year"/>
        <entry key="ISSN" value="ISSN"/>
      </map>
    </property>
  </bean>

  <!--
      Each entry in a CSV is a row, and each column represents the
      same data in each entry. For example the first column might
      record the item title, the second the authors etc. The key of
      the field map is this number. Note that the first column is
      number 0.

      The CSV data loader has these extra parameters that configure
      its behaviour:

      - skipLines: a number that instructs the reader to ignore the
      first lines in the input file. Default value: 0
      - separator: a character that signifies how the values are
      separated. Default value ','
      -quoteChar: individual valued could include the separator
      character. For example if the separator is ',' and there is an
      abstract, there is a high probability that it will contain
      commas. If the value is quoted using the quoteChar then
      separator characters inside it will be ignored. Default value
      '"'.
      -valueSeparator: There are cases where a value is the
      concatenation of multiple values. For instance a list of
      authors. In this case the CSVDataLoader can split the CSV value
      into its individual values, if they are separated with
      valueSeparator. This can be a full java regular
      expression. Default value: null (the csv value is not used by
      default).
  -->
  <bean id="gr.ekt.bteio.loaders.CSVDataLoader"
        class="gr.ekt.bteio.loaders.CSVDataLoader">
    <property name="fieldMap">
      <map>
        <entry key="1" value="Title"/>
        <entry key="0" value="Author"/>
        <entry key="2" value="Year"/>
        <entry key="3" value="Journal"/>
        <entry key="14" value="Abstract"/>
        <entry key="31" value="ISSN"/>
        <entry key="38" value="Type"/>
      </map>
    </property>
    <property name="skipLines" value="1"/>
  </bean>

  <!--
      A TSV file is exactly the same as a CSV one, with the difference
      that the separator is a tab instead of a comma. See the comments
      in the previous section.
  -->
  <bean id="gr.ekt.bteio.loaders.TSVDataLoader"
        class="gr.ekt.bteio.loaders.CSVDataLoader">
    <property name="fieldMap">
      <map>
        <entry key="7" value="Title"/>
        <entry key="1" value="Author"/>
        <entry key="37" value="Year"/>
        <entry key="8" value="Journal"/>
        <entry key="19" value="Abstract"/>
        <entry key="31" value="ISSN"/>
        <entry key="0" value="Type"/>
      </map>
    </property>
    <!-- This makes the CSV data loader able to load TSV data -->
    <property name="separator" value="\u0009"/>
    <property name="skipLines" value="1"/>
  </bean>

  <!--
      The map for the RIS data loader has to have as keys the RIS
      tags that need to be loaded.
  -->
  <bean id="gr.ekt.bteio.loaders.RISDataLoader"
        class="gr.ekt.bteio.loaders.RISDataLoader">
    <property name="fieldMap">
      <map>
        <entry key="T1" value="Title"/>
        <entry key="AU" value="Author"/>
        <entry key="SO" value="Journal"/>
        <entry key="PY" value="Year"/>
        <entry key="SN" value="ISSN"/>
        <entry key="PT" value="Type"/>
        <entry key="AB" value="Abstract"/>
      </map>
    </property>
  </bean>

  <!--<bean id="gr.ekt.bteio.loaders.EndnoteDataLoader"
      class="gr.ekt.bteio.loaders.EndnoteDataLoader">
      </bean> -->


  <!-- Specify here any filters or modifiers to run before the output -->
  <bean id="linearWorkflow"
        class="gr.ekt.bte.core.LinearWorkflow">
    <property name="process">
      <list>
      </list>
    </property>
  </bean>

</beans>